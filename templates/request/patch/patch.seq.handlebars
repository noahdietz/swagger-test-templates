        {{#validateResponse returnType noSchema}}
  /*eslint-disable*/
        {{> schema-partial this}}

        /*eslint-enable*/
        request({
        {{else}}
  request({
        {{/validateResponse}}
          url: {{pathify path pathParams deps}},
          {{#ifCond queryParameters queryApiKey}}
          qs: {
            {{#if queryApiKey}}{{queryApiKey.type}}: process.env.{{queryApiKey.name}}{{#if queryParameters}},
            {{/if}}{{/if}}{{#if queryParameters}}{{#each queryParameters}}{{this.name}}: {{querify ../path this.name ../queryVals ../deps}}{{#unless @last}},
            {{/unless}}{{/each}}{{/if}}
          },
          {{/ifCond}}        method: 'PATCH',
          headers: {
            'Content-Type': '{{contentType}}'{{#if headerParameters}},
            {{#each headerParameters}}'{{this.name}}': 'DATA GOES HERE'{{#unless @last}},{{/unless}}{{/each}}{{/if}}{{#if headerApiKey}},
            {{headerApiKey.type}}: process.env.{{headerApiKey.name}}{{/if}}{{#if headerSecurity}},
            Authorization: '{{headerSecurity.type}} ' + process.env.{{headerSecurity.name}}{{/if}}
          },
          {{#is contentType 'application/json'}}
          json: {
            {{#each bodyParameters}}
            {{this.name}}: {{bodify ../../path this.name ../../bodyVals ../../deps}}{{#unless @last}},{{/unless}}
            {{/each}}
          }
        },
          {{/is}}
          {{#is contentType 'application/x-www-form-urlencoded'}}
          form: {
            {{#each formParameters}}
            {{this.name}}: {{bodify ../../path this.name ../../bodyVals ../../deps}}{{#unless @last}},{{/unless}}
            {{/each}}
          }
        },
          {{/is}}
          {{#is contentType 'multipart/form-data'}}
          form: {
            {{#each formParameters}}
            {{this.name}}: {{bodify ../../path this.name ../../bodyVals ../../deps}}{{#unless @last}},{{/unless}}
            {{/each}}
          }
        },
          {{/is}}
          {{#is contentType 'application/xml'}}
          body: 'XML STRING GOES HERE'
        },
          {{/is}}
        function(error, res, body) {
          if (error) {
            return cb(new Error(error.message +
              ' | erroneous call - {{extractPath path}} PATCH'));
          }

          {{#is assertion 'expect'}}
          {{#if default}}
          expect(res.statusCode).to.equal('DEFAULT RESPONSE CODE HERE');
          {{else}}
          expect(res.statusCode).to.equal({{responseCode}});
          {{/if}}
          {{/is}}
          {{#is assertion 'should'}}
          {{#if default}}
          res.statusCode.should.equal('DEFAULT RESPONSE CODE HERE');
          {{else}}
          res.statusCode.should.equal({{responseCode}});
          {{/if}}
          {{/is}}
          {{#is assertion 'assert'}}
          {{#if default}}
          assert.equal(res.statusCode, 'DEFAULT RESPONSE CODE HERE');
          {{else}}
          assert.equal(res.statusCode, {{responseCode}});
          {{/if}}
          {{/is}}

          {{#validateResponse returnType noSchema}}
          {{#is ../assertion 'expect'}}
          expect(validator.validate(body, schema)).to.be.true;
          {{/is}}
          {{#is ../assertion 'should'}}
          validator.validate(body, schema).should.be.true;
          {{/is}}
          {{#is ../assertion 'assert'}}
          assert.true(validator.validate(body, schema));
          {{/is}}
          {{else}}
          {{#is ../assertion 'expect'}}
          expect(body).to.equal(null); // non-json response or no schema
          {{/is}}
          {{#is ../assertion 'should'}}
          body.should.equal(null); // non-json response or no schema
          {{/is}}
          {{#is ../assertion 'assert'}}
          assert.isNull(body); // non-json response or no schema
          {{/is}}
          {{/validateResponse}}

          deps.{{step}} = JSON.parse(body);
          cb(null);
        });
